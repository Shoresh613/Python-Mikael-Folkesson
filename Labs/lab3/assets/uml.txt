@startuml geometry_shapes
namespace geometry_shapes {
  namespace Shape {}
  namespace Circle {}
  namespace Rectangle {}
  namespace Sphere {}
  namespace Cube {}
}

class geometry_shapes.Shape.Shape {
  + translate(x: nr, y: nr, *args: nr) : void
  - _check_operand_type(calling: Shape, other: Any) : bool
  - _isValueOk(value: nr) : bool
  - _isSizeValueOk(value: nr) : bool
  - __gt__(other: Shape) : bool
  - __lt__(other: Shape) : bool
  - __ge__(other: Shape) : bool
  - __le__(other: Shape) : bool
}

class geometry_shapes.Circle.Circle {
  x: nr
  y: nr
  radius: +nr
  circumference: +nr
  area: +nr
  + isInside(x: nr, y: nr) : bool
  + isUnityCircle() : bool
  + draw(ax: Axis) : void
  - __eq__(other: Circle) : bool
  - __ne__(other: Circle) : bool
}

class geometry_shapes.Rectangle.Rectangle {
  x: nr
  y: nr
  side1: nr
  side2: nr
  circumference: +nr
  area: +nr
  + isInside(x: nr, y: nr) : bool
  + isSquare() : bool
  + draw(ax: Axis) : void
  - __eq__(other: Rectangle) : bool
  - __ne__(other: Rectangle) : bool
}

class geometry_shapes.Sphere.Sphere {
  x: nr
  y: nr
  z: nr
  radius: +nr
  circumference: +nr
  area: +nr
  volume: +nr
  + isInside(x: nr, y: nr, z: nr) : bool
  + isUnitySphere() : bool
  + draw(ax: Axes3D) : void
  - __eq__(other: Sphere) : bool
  - __ne__(other: Sphere) : bool
}

class geometry_shapes.Cube.Cube {
  x: nr
  y: nr
  z: nr
  width: nr
  height: nr
  depth: nr
  circumference: +nr
  area: +nr
  volume: +nr
  + isInside(x: nr, y: nr, z: nr) : bool
  + isUnityCube() : bool
  + isCube() : bool
  + isSquare() : bool
  + draw(ax: Axes3D) : void
  - __eq__(other: Cube) : bool
  - __ne__(other: Cube) : bool
}

geometry_shapes.Shape.Shape <|-- geometry_shapes.Circle.Circle
geometry_shapes.Shape.Shape <|-- geometry_shapes.Rectangle.Rectangle
geometry_shapes.Shape.Shape <|-- geometry_shapes.Sphere.Sphere
geometry_shapes.Shape.Shape <|-- geometry_shapes.Cube.Cube

footer nr = int | float
@enduml
